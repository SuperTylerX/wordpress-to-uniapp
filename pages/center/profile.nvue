<template>
	<view>
		<view class="separator"><text class="title">基本信息</text></view>
		<view class="cell-wrap">
			<u-cell-group>
				<u-cell size="large" title="头像">
					<view slot="value">
						<u-avatar :src="userInfo.avatarUrl"></u-avatar>
					</view>
				</u-cell>
				<u-cell size="large" title="昵称" :value="userInfo.nickname"></u-cell>
				<u-cell size="large" title="UID" :value="userInfo.userId"></u-cell>
				<u-cell size="large" title="用户等级" :value="userInfo.levelName"></u-cell>
				<u-cell size="large" :isLink="true" :value="userInfo.email ? userInfo.email : '未设置'" title="邮箱"
					@tap="changeItem('email')"></u-cell>
			</u-cell-group>
		</view>
		<view class="separator"><text class="title">社交绑定</text></view>

		<view class="cell-wrap">
			<u-cell-group>
				<u-cell size="large" title="微信" icon="/static/icon-wechat.png" :label="socialWechat"
					:iconStyle="{'marginRight':'20rpx'}">
					<view slot="value">
						<u-tag :text="socialWechat? '已绑定' : '绑定'" plain color="#909193" borderColor="#909193"
							shape="circle" size="large" @click="bindSocial('wechat')">
						</u-tag>
					</view>
				</u-cell>
				<u-cell size="large" title="QQ" icon="/static/icon-qq.png" :label="socialQQ"
					:iconStyle="{'marginRight':'20rpx'}">
					<view slot="value">
						<u-tag :text="socialQQ? '已绑定' : '绑定'" plain color="#909193" borderColor="#909193" shape="circle"
							size="large" @click="bindSocial('qq')">
						</u-tag>
					</view>
				</u-cell>
				<u-cell size="large" title="字节跳动" icon="/static/icon-toutiao.png" :label="socialBytedance"
					:iconStyle="{'marginRight':'20rpx'}">
					<view slot="value">
						<u-tag :text="socialBytedance? '已绑定' : '绑定'" plain color="#909193" borderColor="#909193"
							shape="circle" size="large" @click="bindSocial('byteDance')">
						</u-tag>
					</view>
				</u-cell>
			</u-cell-group>
		</view>

		<u-popup :show="isPopupShow" @close="showPopup = false" mode="center" :safeAreaInsetBottom="false">
			<view class="pop-box">
				<view class="title">更换新邮箱</view>
				<view class="item">
					<u--input placeholder="请输入新邮箱" v-model="newEmail.email" border="bottom" clearable></u--input>
				</view>
				<view class="item captchaImg-wrap">
					<u--input placeholder="请输入图形验证码" v-model="graphicCaptchaComputed" border="bottom" clearable
						:maxlength="4">
					</u--input>
					<image :src="captchaImg" class="captchaImg" mode="scaleToFill" @click="refreshGraphicCaptcha">
				</view>
				<view class="item captchaImg-wrap">
					<u--input placeholder="请输入邮箱验证码" v-model="newEmail.emailCaptcha" border="bottom" clearable>
					</u--input>
					<view class="fetch-btn" v-if="showFetchMailCaptcha" @click="getEmailCaptcha">点击获取验证码</view>
					<view class="waitting" v-else>{{ timer }}秒后重新获取</view>
				</view>

				<view class="buttons">
					<button class="cancel" @tap="cancel">取消</button>
					<button class="confrim" @tap="updateEmail">确认</button>
				</view>
			</view>
		</u-popup>
	</view>
</template>

<script>
	import * as unip from "@/utils/uniPromisify.js";
	import { getPlatform } from "@/utils/utils.js";
	import { getGraphicCaptcha, getEmailCaptcha, updateUserEmail } from "../../utils/http.js";

	const sleep = time => new Promise(resolve => setTimeout(resolve, time));

	export default {
		data() {
			return {
				isPopupShow: false,
				email: "",
				captchaImg: "",
				newEmail: {
					email: "",
					graphicCaptcha: "",
					emailCaptcha: ""
				},
				showFetchMailCaptcha: true,
				timer: 60,
				token: ""
			};
		},
		computed: {
			userInfo() {
				return this.$store.state.authStore.userInfo;
			},
			socialQQ() {
				if (this.$store.state.authStore.userInfo.social_connect) {
					return this.$store.state.authStore.userInfo.social_connect.qq;
				} else {
					return "";
				}
			},
			socialWechat() {
				if (this.$store.state.authStore.userInfo.social_connect) {
					return this.$store.state.authStore.userInfo.social_connect.wechat;
				} else {
					return "";
				}
			},
			socialBytedance() {
				if (this.$store.state.authStore.userInfo.social_connect) {
					return this.$store.state.authStore.userInfo.social_connect.bytedance;
				} else {
					return "";
				}
			},
			graphicCaptchaComputed: {
				get: function() {
					return this.newEmail.graphicCaptcha;
				},
				set: function(val) {
					this.newEmail.graphicCaptcha = val.toUpperCase();
				}
			}
		},
		methods: {
			async refreshGraphicCaptcha() {
				// 获取图形验证码
				const args = {
					token: this.token === "" ? null : this.token
				};
				try {
					const {
						data: { image, token }
					} = await getGraphicCaptcha(args);

					this.captchaImg = image;
					this.token = token;
				} catch (e) {
					console.error(e);
				}
			},
			async getEmailCaptcha() {
				const reqParamsObj = {
					email: this.newEmail.email,
					graphicCaptcha: this.graphicCaptchaComputed,
					token: this.token
				};

				/* 验证一下输入是否合法 */
				// 验证邮箱格式
				if (!/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(reqParamsObj
						.email)) {
					uni.showToast({
						title: "邮箱格式有误",
						icon: "error"
					});
					return;
				}
				// 验证图形验证码长度
				if (reqParamsObj.graphicCaptcha.length !== 4) {
					uni.showToast({
						title: "图形验证码长度有误",
						icon: "none"
					});
					return;
				}

				uni.showToast({
					title: "请稍后...",
					icon: "loading",
					duration: 999999
				});
				try {
					const {
						data: { code, message }
					} = await getEmailCaptcha(reqParamsObj);

					if (code !== "200") {
						uni.showToast({
							title: message,
							icon: "error"
						});
						if (code === "4001" || code === "4002") {
							// token过期，重新获取验证码
							this.refreshGraphicCaptcha();
							this.graphicCaptchaComputed = "";
						}
						return;
					}
				} catch (e) {
					console.error(e);
					uni.showToast({
						title: "请检查网络",
						icon: "error"
					});
					return;
				}

				uni.showToast({
					title: "发送成功, 请检查您的邮箱！",
					icon: "none",
					position: "bottom"
				});

				this.showFetchMailCaptcha = false;
				for (let i = 60; i >= 0; i--) {
					this.timer = i;
					await sleep(1000);
				}
				this.showFetchMailCaptcha = true;
			},
			async updateEmail() {
				const reqParamsObj = {
					email: this.newEmail.email,
					graphicCaptcha: this.graphicCaptchaComputed,
					emailCaptcha: this.newEmail.emailCaptcha,
					token: this.token
				};

				// 验证邮箱格式
				if (!/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/.test(reqParamsObj
						.email)) {
					uni.showToast({
						title: "邮箱格式有误",
						icon: "error"
					});
					return;
				}
				// 验证图形验证码长度
				if (reqParamsObj.graphicCaptcha.length !== 4) {
					uni.showToast({
						title: "图形验证码长度有误",
						icon: "none"
					});
					return;
				}
				// 验证邮箱验证码长度
				if (reqParamsObj.emailCaptcha.length !== 6) {
					uni.showToast({
						title: "邮箱验证码长度有误",
						icon: "none"
					});
					return;
				}

				uni.showToast({
					title: "请稍后...",
					icon: "loading",
					duration: 999999
				});

				try {
					const { code, message } = await updateUserEmail(reqParamsObj);

					if (code !== "200") {
						uni.showToast({
							title: message,
							icon: "error"
						});
						if (code === "4001" || code === "4002") {
							// token过期，重新获取验证码
							this.refreshGraphicCaptcha();
							this.graphicCaptchaComputed = "";
							this.form.emailCaptcha = "";
						}
						return;
					}
				} catch (e) {
					console.error(e);
					uni.showToast({
						title: "请检查网络",
						icon: "error"
					});
					return;
				}

				uni.showToast({
					title: "修改成功",
					icon: "success"
				});

				const login_type = uni.getStorageSync("login_type");
				this.$store.dispatch("authStore/getUserInfo", { login_type });
				this.cancel();
			},
			changeItem(item) {
				this.isPopupShow = true;
				switch (item) {
					case "email":
						this.refreshGraphicCaptcha();
						break;
				}
			},
			cancel() {
				this.isPopupShow = false;
				this.newEmail = {
					email: "",
					graphicCaptcha: "",
					emailCaptcha: ""
				};
			},
			async bindSocial(type) {
				switch (type) {
					case "wechat":
						if (!this.userInfo.email) {
							uni.showToast({
								title: "您尚未绑定邮箱，无法解绑！",
								icon: "none"
							});
							return;
						}
						if (this.socialWechat) {
							const res = await unip.showModal({
								title: "提示",
								content: "您确认要解绑微信吗？"
							});
							if (res.confirm) {
								// 取消绑定
								console.log("取消绑定");
							}
						} else {
							if (!["MP-WEIXIN", "APP"].includes(getPlatform())) {
								uni.showToast({
									title: "请在微信小程序或APP中绑定",
									icon: "none"
								});
							}
							console.log("去绑定");
						}

						break;
					case "qq":

						break;
					case "byteDance":

						break;
				}
			}
		}
	};
</script>

<style lang="scss" scope>
	page {
		background-color: #f4f7f6;
	}

	.separator {
		height: 80rpx;
		background-color: #f4f7f6;
		display: flex;
		justify-content: flex-end;
		padding: 10rpx;

		.title {
			font-size: 30rpx;
			margin-left: 25rpx;
			color: #909193;
		}
	}

	.cell-wrap {
		background-color: #ffffff;
	}

	.pop-box {
		width: 600rpx;
		height: 600rpx;
		border-radius: 10rpx;
		display: flex;
		justify-content: space-between;
		padding: 30rpx;
		background-color: #ffffff;

		.item {
			display: flex;

			.label {
				margin-bottom: 10rpx;
			}

			.captchaImg {
				height: 40px;
				width: 120px;
			}

			.fetch-btn {
				color: #007aff;
				cursor: pointer;
			}

			.waitting {
				color: #cccccc;
			}

			&.captchaImg-wrap {
				display: flex;
				justify-content: space-between;
				flex-direction: row;
			}
		}

		.buttons {
			display: flex;
			flex-direction: row;
			justify-content: flex-end;

			.cancel,
			.confrim {
				border: none;
				background-color: transparent;
				font-size: 30rpx;

				&::after {
					border: none;
				}
			}

			.confrim {
				color: #0081ff;
			}
		}
	}
</style>
